# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Student(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Student()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStudent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Student
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Student
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Student
    def Login(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Student
    def Group(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Student
    def Practice(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Student
    def PracticeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Student
    def PracticeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Student
    def PracticeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Student
    def Project(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from schema.Project import Project
            obj = Project()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Student
    def Mark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def StudentStart(builder): builder.StartObject(6)
def Start(builder):
    return StudentStart(builder)
def StudentAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return StudentAddName(builder, name)
def StudentAddLogin(builder, login): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(login), 0)
def AddLogin(builder, login):
    return StudentAddLogin(builder, login)
def StudentAddGroup(builder, group): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(group), 0)
def AddGroup(builder, group):
    return StudentAddGroup(builder, group)
def StudentAddPractice(builder, practice): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(practice), 0)
def AddPractice(builder, practice):
    return StudentAddPractice(builder, practice)
def StudentStartPracticeVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartPracticeVector(builder, numElems):
    return StudentStartPracticeVector(builder, numElems)
def StudentAddProject(builder, project): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(project), 0)
def AddProject(builder, project):
    return StudentAddProject(builder, project)
def StudentAddMark(builder, mark): builder.PrependFloat32Slot(5, mark, 0.0)
def AddMark(builder, mark):
    return StudentAddMark(builder, mark)
def StudentEnd(builder): return builder.EndObject()
def End(builder):
    return StudentEnd(builder)