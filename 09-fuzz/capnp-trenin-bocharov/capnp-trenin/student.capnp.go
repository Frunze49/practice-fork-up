// Code generated by capnpc-go. DO NOT EDIT.

package student

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Student capnp.Struct

// Student_TypeID is the unique identifier for the type Student.
const Student_TypeID = 0xa3ed0afad883a197

func NewStudent(s *capnp.Segment) (Student, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Student(st), err
}

func NewRootStudent(s *capnp.Segment) (Student, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Student(st), err
}

func ReadRootStudent(msg *capnp.Message) (Student, error) {
	root, err := msg.Root()
	return Student(root.Struct()), err
}

func (s Student) String() string {
	str, _ := text.Marshal(0xa3ed0afad883a197, capnp.Struct(s))
	return str
}

func (s Student) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Student) DecodeFromPtr(p capnp.Ptr) Student {
	return Student(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Student) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Student) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Student) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Student) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Student) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Student) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Student) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Student) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Student) Login() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Student) HasLogin() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Student) LoginBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Student) SetLogin(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Student) Group() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Student) HasGroup() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Student) GroupBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Student) SetGroup(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Student) Practice() (capnp.UInt8List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.UInt8List(p.List()), err
}

func (s Student) HasPractice() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Student) SetPractice(v capnp.UInt8List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewPractice sets the practice field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Student) NewPractice(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Student) Project() (Student_Project, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return Student_Project(p.Struct()), err
}

func (s Student) HasProject() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Student) SetProject(v Student_Project) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewProject sets the project field to a newly
// allocated Student_Project struct, preferring placement in s's segment.
func (s Student) NewProject() (Student_Project, error) {
	ss, err := NewStudent_Project(capnp.Struct(s).Segment())
	if err != nil {
		return Student_Project{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Student) Mark() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Student) SetMark(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

// Student_List is a list of Student.
type Student_List = capnp.StructList[Student]

// NewStudent creates a new list of Student.
func NewStudent_List(s *capnp.Segment, sz int32) (Student_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[Student](l), err
}

// Student_Future is a wrapper for a Student promised by a client call.
type Student_Future struct{ *capnp.Future }

func (f Student_Future) Struct() (Student, error) {
	p, err := f.Future.Ptr()
	return Student(p.Struct()), err
}
func (p Student_Future) Project() Student_Project_Future {
	return Student_Project_Future{Future: p.Future.Field(4, nil)}
}

type Student_Project capnp.Struct

// Student_Project_TypeID is the unique identifier for the type Student_Project.
const Student_Project_TypeID = 0xf7cec383a65e3376

func NewStudent_Project(s *capnp.Segment) (Student_Project, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Student_Project(st), err
}

func NewRootStudent_Project(s *capnp.Segment) (Student_Project, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Student_Project(st), err
}

func ReadRootStudent_Project(msg *capnp.Message) (Student_Project, error) {
	root, err := msg.Root()
	return Student_Project(root.Struct()), err
}

func (s Student_Project) String() string {
	str, _ := text.Marshal(0xf7cec383a65e3376, capnp.Struct(s))
	return str
}

func (s Student_Project) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Student_Project) DecodeFromPtr(p capnp.Ptr) Student_Project {
	return Student_Project(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Student_Project) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Student_Project) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Student_Project) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Student_Project) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Student_Project) Repo() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Student_Project) HasRepo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Student_Project) RepoBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Student_Project) SetRepo(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Student_Project) Mark() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s Student_Project) SetMark(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

// Student_Project_List is a list of Student_Project.
type Student_Project_List = capnp.StructList[Student_Project]

// NewStudent_Project creates a new list of Student_Project.
func NewStudent_Project_List(s *capnp.Segment, sz int32) (Student_Project_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Student_Project](l), err
}

// Student_Project_Future is a wrapper for a Student_Project promised by a client call.
type Student_Project_Future struct{ *capnp.Future }

func (f Student_Project_Future) Struct() (Student_Project, error) {
	p, err := f.Future.Ptr()
	return Student_Project(p.Struct()), err
}

const schema_85d3acc39d94e0f8 = "x\xda\\\x90\xbf\x8a\x13Q\x18\xc5\xcf\xf9\xeeL\"a" +
	"5\xb9\xbb\x03\xbb\xd8\xd8X\xa8\xb0\xeb\x9fXYIJ" +
	"\xab|X\xd8\x09\xc3d\x0cQ33\x8ew\xb4L\x11" +
	"|\x83\x80\x0a\x06\x0cF\xb1\xf0\x01,\x14\x94XXY" +
	"(\x82\xa5/`a\xa5\x0822\x84$\xb2\xdd=\x07" +
	"\xeew\xce\xf9\xb5\xbe^\xf6\xce\x1f\xdd\x15\x88\xee\xf9\xb5" +
	"\xf2\xe1l\xfc\xedO\xe3\xc73\xe86Y\xfe\xfe>\x99" +
	".^}y\x00\xdf\xaf\x03\xf6\xe7g\xfbw\x17h\xfb" +
	"\xbcF\xb0\xbc\xd7\xbe\xfeb\xbc\xf8\xf4\x0bz\x9c\xdc\xfc" +
	"\xf4Y\x07\xda\xb1ls\xa7\x90:\xb0sG\xeec\xbf" +
	"\xbc\x91\xa6g\xef\xba\xa2'q\xe2\x0e\xa20K\xb2K" +
	"W]\xd1\x8b\x13:\xf5\xf8\xdf5\xcb\xce\xa8\x9b\xa77" +
	"\xe3\xc8\xe9\x9e\xf1\x00\x8f\x80}|\x06\xd0\x89\xa1>\x15" +
	"Z2`eN/\x00\xfa\xc8P\xe7B+\x12P\x00" +
	";\xab\xcc'\x86\xfaRh\x8d\x09h\x00\xfb\xfc\x0a\xa0" +
	"sC}'\xb4\x9e\x17\xd0\x03\xec\xdb\x0e\xa0\xaf\x0d\xf5" +
	"\x83\x90~@\x1f\xb0\xef\xab\x9c7\x86\xfaQ\xd8L\xc2" +
	"a\xcc-\x08\xb7\xc0\x13\xb7\xd3\xfe Y\xab~\x9e\x16" +
	"\xd9J\x95Y\x1eFn\x10\xc5\x00x\x0c\xec\x1a\xb2\x06" +
	"\xa9\x9e\xa3l9\x85\xad\xcdB\x90-\xb09\x0c\xf3[" +
	"l@\xd8\x00\xd7x\xcca<\xee`\x09\x83\xaeK\xea" +
	"\x915\x90\xd3U\xd1\x93\x86zN\xb8\xe2\xb1_y\xa7" +
	"\x0c\xf5\xa2\xb0\x99\xc7Y\xba*\xb8\xcc\xaa*\xd5\xc0\x7f" +
	"\x01\x00\x00\xff\xffR\xd0t\xe1"

func init() {
	schemas.Register(schema_85d3acc39d94e0f8,
		0xa3ed0afad883a197,
		0xf7cec383a65e3376)
}
