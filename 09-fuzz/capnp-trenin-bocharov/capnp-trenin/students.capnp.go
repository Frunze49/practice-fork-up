// Code generated by capnpc-go. DO NOT EDIT.

package student

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Student capnp.Struct

// Student_TypeID is the unique identifier for the type Student.
const Student_TypeID = 0xa3ed0afad883a197

func NewStudent(s *capnp.Segment) (Student, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Student(st), err
}

func NewRootStudent(s *capnp.Segment) (Student, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Student(st), err
}

func ReadRootStudent(msg *capnp.Message) (Student, error) {
	root, err := msg.Root()
	return Student(root.Struct()), err
}

func (s Student) String() string {
	str, _ := text.Marshal(0xa3ed0afad883a197, capnp.Struct(s))
	return str
}

func (s Student) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Student) DecodeFromPtr(p capnp.Ptr) Student {
	return Student(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Student) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Student) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Student) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Student) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Student) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Student) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Student) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Student) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Student) Login() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Student) HasLogin() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Student) LoginBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Student) SetLogin(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Student) Group() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Student) HasGroup() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Student) GroupBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Student) SetGroup(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Student) Practice() (capnp.UInt8List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.UInt8List(p.List()), err
}

func (s Student) HasPractice() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Student) SetPractice(v capnp.UInt8List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewPractice sets the practice field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Student) NewPractice(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Student) Project() (Student_Project, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return Student_Project(p.Struct()), err
}

func (s Student) HasProject() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Student) SetProject(v Student_Project) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewProject sets the project field to a newly
// allocated Student_Project struct, preferring placement in s's segment.
func (s Student) NewProject() (Student_Project, error) {
	ss, err := NewStudent_Project(capnp.Struct(s).Segment())
	if err != nil {
		return Student_Project{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Student) Mark() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Student) SetMark(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

// Student_List is a list of Student.
type Student_List = capnp.StructList[Student]

// NewStudent creates a new list of Student.
func NewStudent_List(s *capnp.Segment, sz int32) (Student_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[Student](l), err
}

// Student_Future is a wrapper for a Student promised by a client call.
type Student_Future struct{ *capnp.Future }

func (f Student_Future) Struct() (Student, error) {
	p, err := f.Future.Ptr()
	return Student(p.Struct()), err
}
func (p Student_Future) Project() Student_Project_Future {
	return Student_Project_Future{Future: p.Future.Field(4, nil)}
}

type Student_Project capnp.Struct

// Student_Project_TypeID is the unique identifier for the type Student_Project.
const Student_Project_TypeID = 0xf7cec383a65e3376

func NewStudent_Project(s *capnp.Segment) (Student_Project, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Student_Project(st), err
}

func NewRootStudent_Project(s *capnp.Segment) (Student_Project, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Student_Project(st), err
}

func ReadRootStudent_Project(msg *capnp.Message) (Student_Project, error) {
	root, err := msg.Root()
	return Student_Project(root.Struct()), err
}

func (s Student_Project) String() string {
	str, _ := text.Marshal(0xf7cec383a65e3376, capnp.Struct(s))
	return str
}

func (s Student_Project) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Student_Project) DecodeFromPtr(p capnp.Ptr) Student_Project {
	return Student_Project(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Student_Project) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Student_Project) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Student_Project) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Student_Project) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Student_Project) Repo() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Student_Project) HasRepo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Student_Project) RepoBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Student_Project) SetRepo(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Student_Project) Mark() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s Student_Project) SetMark(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

// Student_Project_List is a list of Student_Project.
type Student_Project_List = capnp.StructList[Student_Project]

// NewStudent_Project creates a new list of Student_Project.
func NewStudent_Project_List(s *capnp.Segment, sz int32) (Student_Project_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Student_Project](l), err
}

// Student_Project_Future is a wrapper for a Student_Project promised by a client call.
type Student_Project_Future struct{ *capnp.Future }

func (f Student_Project_Future) Struct() (Student_Project, error) {
	p, err := f.Future.Ptr()
	return Student_Project(p.Struct()), err
}

type Students capnp.Struct

// Students_TypeID is the unique identifier for the type Students.
const Students_TypeID = 0xad1e002d5f02f680

func NewStudents(s *capnp.Segment) (Students, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Students(st), err
}

func NewRootStudents(s *capnp.Segment) (Students, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Students(st), err
}

func ReadRootStudents(msg *capnp.Message) (Students, error) {
	root, err := msg.Root()
	return Students(root.Struct()), err
}

func (s Students) String() string {
	str, _ := text.Marshal(0xad1e002d5f02f680, capnp.Struct(s))
	return str
}

func (s Students) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Students) DecodeFromPtr(p capnp.Ptr) Students {
	return Students(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Students) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Students) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Students) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Students) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Students) List() (Student_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Student_List(p.List()), err
}

func (s Students) HasList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Students) SetList(v Student_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewList sets the list field to a newly
// allocated Student_List, preferring placement in s's segment.
func (s Students) NewList(n int32) (Student_List, error) {
	l, err := NewStudent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Student_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Students_List is a list of Students.
type Students_List = capnp.StructList[Students]

// NewStudents creates a new list of Students.
func NewStudents_List(s *capnp.Segment, sz int32) (Students_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Students](l), err
}

// Students_Future is a wrapper for a Students promised by a client call.
type Students_Future struct{ *capnp.Future }

func (f Students_Future) Struct() (Students, error) {
	p, err := f.Future.Ptr()
	return Students(p.Struct()), err
}

const schema_85d3acc39d94e0f8 = "x\xdatP=k\x14Q\x14=\xe7\xbe7kX\x12" +
	"g\x1f;\x10\x0b?\x9a\x08*lPce\xb3\x92\xd2" +
	"j/\x16v\xca\xb2\x0ea5\xd9\x19f'ZF\x08" +
	"\x96\x16BD\x05\x03\x06\xa3Xh/\xa2`\x8c\x85\x16" +
	"\xda\xd8\xd8\xe9\x1f\xb0\x8d\x92f\xe49\xcen\x9at\xf7" +
	"\x1e\x0e\xe7\xab\xb1s\xc1\x9e\x99J\x04\xa2\x87\x83Z\xf1" +
	"`c\xf5\xfbn\xfd\xd7ShH\x16\x7f~\xae\xado" +
	"\xbf\xfcv\x07Ap\x00h\x1e\xe1\x9b\xe6qN\x03s" +
	"-^&\xf8\xe3\xf6\x8e\\m\x1d}\xe5\xc2\xbdTz" +
	"\xea]\xf9\xd0\xbc/\xfe\xba'm\xb0\xb89w\xe5\xf9" +
	"\xea\xf6\xd7\xdf\xd0ir\xecR\x92\xb7d\xb7\xf9\xe5\x1f" +
	"\xf9\xb3\xdcB\xab\x18\xe6\xcb\xd7\xe2A>\xe4l\xaf\x9b" +
	"\x0e\xd2\xf3\x97\xda%\xa0\x96{\x94\x1c\xe7W:Yr" +
	"=\xee\xe5z\xc8X\xc0\x12p\x8fN\x01\xbaf\xa8O" +
	"\x84\x8e\x8c\xe8\xc1\xf5\xb3\x80>4\xd4M\xa1\x13\x89(" +
	"\x80\xdb\xf0\xe0cC}!t\xc6D4\x80{v\x11" +
	"\xd0MC}/t\xd6F\xb4\x80{7\x0f\xe8kC" +
	"\xfd(d\x101\x00\xdc\x96\xf7yk\xa8\x9f\x84\xe1\xa0" +
	"\xbb\x14s\x12\xc2I\xf0\xd8b\xb2\xd0\x1f\x8c\xbe\x85," +
	"YN\xab\xafH\xb3n/\xef\xf7b\x00<\x08v\x0c" +
	"Y\x83\xf8s%-\xab\xb01n\x08\xb2\x01\x86K\xdd" +
	"\xec\x06\xeb\x10\xd6\xc1\xd16Rm\xf3\xffG\x87T;" +
	"\x9aa\xca\xc7\x9b0\xd4\x19a\xb8\xd8\x1f\xe6\x95]c" +
	"<>\xe8\xc1\xfd\x14g;\xed2\x91\x17\x9e\x18\x09\x9f" +
	"\xf4\xc23\x86zZX\xcd\xdb\xf2\xd8\x09C='\x0c" +
	"\xb38M\xaa\xbeet\xdf\xb0\x06\xfe\x0d\x00\x00\xff\xff" +
	"\xde>\x96K"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_85d3acc39d94e0f8,
		Nodes: []uint64{
			0xa3ed0afad883a197,
			0xad1e002d5f02f680,
			0xf7cec383a65e3376,
		},
		Compressed: true,
	})
}
