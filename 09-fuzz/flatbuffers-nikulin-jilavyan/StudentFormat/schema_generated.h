// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_STUDENTFORMAT_H_
#define FLATBUFFERS_GENERATED_SCHEMA_STUDENTFORMAT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace StudentFormat {

struct StudentProject;

struct Student;

struct StudentMessage;
struct StudentMessageBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) StudentProject FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t repo_[59];
  uint8_t mark_;

 public:
  StudentProject()
      : repo_(),
        mark_(0) {
  }
  StudentProject(uint8_t _mark)
      : repo_(),
        mark_(::flatbuffers::EndianScalar(_mark)) {
  }
  StudentProject(::flatbuffers::span<const uint8_t, 59> _repo, uint8_t _mark)
      : mark_(::flatbuffers::EndianScalar(_mark)) {
    ::flatbuffers::CastToArray(repo_).CopyFromSpan(_repo);
  }
  const ::flatbuffers::Array<uint8_t, 59> *repo() const {
    return &::flatbuffers::CastToArray(repo_);
  }
  uint8_t mark() const {
    return ::flatbuffers::EndianScalar(mark_);
  }
};
FLATBUFFERS_STRUCT_END(StudentProject, 60);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Student FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t name_[32];
  uint8_t login_[16];
  uint8_t group_[8];
  uint8_t practice_[8];
  StudentFormat::StudentProject project_;
  float mark_;

 public:
  Student()
      : name_(),
        login_(),
        group_(),
        practice_(),
        project_(),
        mark_(0) {
  }
  Student(const StudentFormat::StudentProject &_project, float _mark)
      : name_(),
        login_(),
        group_(),
        practice_(),
        project_(_project),
        mark_(::flatbuffers::EndianScalar(_mark)) {
  }
  Student(::flatbuffers::span<const uint8_t, 32> _name, ::flatbuffers::span<const uint8_t, 16> _login, ::flatbuffers::span<const uint8_t, 8> _group, ::flatbuffers::span<const uint8_t, 8> _practice, const StudentFormat::StudentProject &_project, float _mark)
      : project_(_project),
        mark_(::flatbuffers::EndianScalar(_mark)) {
    ::flatbuffers::CastToArray(name_).CopyFromSpan(_name);
    ::flatbuffers::CastToArray(login_).CopyFromSpan(_login);
    ::flatbuffers::CastToArray(group_).CopyFromSpan(_group);
    ::flatbuffers::CastToArray(practice_).CopyFromSpan(_practice);
  }
  const ::flatbuffers::Array<uint8_t, 32> *name() const {
    return &::flatbuffers::CastToArray(name_);
  }
  const ::flatbuffers::Array<uint8_t, 16> *login() const {
    return &::flatbuffers::CastToArray(login_);
  }
  const ::flatbuffers::Array<uint8_t, 8> *group() const {
    return &::flatbuffers::CastToArray(group_);
  }
  const ::flatbuffers::Array<uint8_t, 8> *practice() const {
    return &::flatbuffers::CastToArray(practice_);
  }
  const StudentFormat::StudentProject &project() const {
    return project_;
  }
  float mark() const {
    return ::flatbuffers::EndianScalar(mark_);
  }
};
FLATBUFFERS_STRUCT_END(Student, 128);

struct StudentMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StudentMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STUDENTIMPL = 4
  };
  const ::flatbuffers::Vector<const StudentFormat::Student *> *studentimpl() const {
    return GetPointer<const ::flatbuffers::Vector<const StudentFormat::Student *> *>(VT_STUDENTIMPL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STUDENTIMPL) &&
           verifier.VerifyVector(studentimpl()) &&
           verifier.EndTable();
  }
};

struct StudentMessageBuilder {
  typedef StudentMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_studentimpl(::flatbuffers::Offset<::flatbuffers::Vector<const StudentFormat::Student *>> studentimpl) {
    fbb_.AddOffset(StudentMessage::VT_STUDENTIMPL, studentimpl);
  }
  explicit StudentMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StudentMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StudentMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StudentMessage> CreateStudentMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const StudentFormat::Student *>> studentimpl = 0) {
  StudentMessageBuilder builder_(_fbb);
  builder_.add_studentimpl(studentimpl);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<StudentMessage> CreateStudentMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<StudentFormat::Student> *studentimpl = nullptr) {
  auto studentimpl__ = studentimpl ? _fbb.CreateVectorOfStructs<StudentFormat::Student>(*studentimpl) : 0;
  return StudentFormat::CreateStudentMessage(
      _fbb,
      studentimpl__);
}

inline const StudentFormat::StudentMessage *GetStudentMessage(const void *buf) {
  return ::flatbuffers::GetRoot<StudentFormat::StudentMessage>(buf);
}

inline const StudentFormat::StudentMessage *GetSizePrefixedStudentMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<StudentFormat::StudentMessage>(buf);
}

inline bool VerifyStudentMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<StudentFormat::StudentMessage>(nullptr);
}

inline bool VerifySizePrefixedStudentMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<StudentFormat::StudentMessage>(nullptr);
}

inline void FinishStudentMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<StudentFormat::StudentMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedStudentMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<StudentFormat::StudentMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace StudentFormat

#endif  // FLATBUFFERS_GENERATED_SCHEMA_STUDENTFORMAT_H_
